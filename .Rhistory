data5 = read.csv("C:/Users/yagmu/Desktop/sub5.csv")
data5 = t(data5)
data5 = data5[-c(1:3),c(1:65)]
data6 = read.csv("C:/Users/yagmu/Desktop/sub6.csv")
data6 = t(data6)
data6 = data6[-c(1:3),c(1:65)]
data7 = read.csv("C:/Users/yagmu/Desktop/sub7.csv")
data7 = t(data7)
data7 = data7[-c(1:3),c(1:65)]
data8 = read.csv("C:/Users/yagmu/Desktop/sub8.csv")
data8 = t(data8)
data8 = data8[-c(1:3),c(1:65)]
data9 = read.csv("C:/Users/yagmu/Desktop/sub9.csv")
data9 = t(data9)
data9 = data9[-c(1:3),c(1:65)]
data10 = read.csv("C:/Users/yagmu/Desktop/sub10.csv")
data10 = t(data10)
data10 = data10[-c(1:3),c(1:65)]
data11 = read.csv("C:/Users/yagmu/Desktop/sub11.csv")
data11 = t(data11)
data11 = data11[-c(1:3),c(1:65)]
data12 = read.csv("C:/Users/yagmu/Desktop/sub12.csv")
data12 = t(data12)
data12 = data12[-c(1:3),c(1:65)]
data13 = read.csv("C:/Users/yagmu/Desktop/sub13.csv")
data13 = t(data13)
data13 = data13[-c(1:3),c(1:65)]
data14 = read.csv("C:/Users/yagmu/Desktop/sub14.csv")
data14 = t(data14)
data14 = data14[-c(1:3),c(1:65)]
data15 = read.csv("C:/Users/yagmu/Desktop/sub15.csv")
data15 = t(data15)
data15 = data15[-c(1:3),c(1:65)]
data16 = read.csv("C:/Users/yagmu/Desktop/sub16.csv")
data16 = t(data16)
data16 = data16[-c(1:3),c(1:65)]
data17 = read.csv("C:/Users/yagmu/Desktop/sub17.csv")
data17 = t(data17)
data17 = data17[-c(1:3),c(1:65)]
data = rbind(data1, data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14, data15,data16,data17)
subject = c(rep(1,64), rep(2,64), rep(3,64), rep(4,64), rep(5,64), rep(6,64), rep(7,64), rep(8,65), rep(9,64), rep(10,64), rep(11,64), rep(12,64), rep(13,64), rep(14,64), rep(15,64), rep(16,64), rep(17,64))
data = data.frame(data,subject)
colnames(data) = c("buy",c(1:64),"subject")
data$subject = as.factor(data$subject)
data[2:65] = lapply(data[2:65], as.numeric)
y = data$buy
X = data[,-1]
library(caret)
library(lme4)
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="none")
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
q0 = 0.2
dmax = 10
graine = 11
Criteria[[1]] <- crit
Group[[1]] <- seq_along(crit)
selected_group[[1]] <- which(crit <= quantile(crit,q0)) #models with smaller error
id_screening <- selected_group[[1]]
m = choose(length(id_screening),2)
for(d in 2:dmax){
# cv0 <- cv1
idRow <- selected_group[[d-1]]
if(d==2){
idVar <- Group[[d-1]][idRow]
nrv <- length(idVar)
}else{
if(length(idRow) == 1){
idVar <- Group[[d-1]][idRow]
nrv <- length(idVar)
}else{
idVar <- Group[[d-1]][idRow,]
nrv <- nrow(idVar)
}
}
# build all possible
A <- matrix(nr=nrv*length(id_screening),nc=d)
A[,1:(d-1)] <- kronecker(cbind(rep(1,length(id_screening))),idVar)
A[,d] <- rep(id_screening,each=nrv)
B <- unique(t(apply(A,1,sort)))
id_ndup <- which(apply(B,1,anyDuplicated) == 0)
var_mat <- B[id_ndup,]
rm(list=c("A","B"))
if(nrow(var_mat)>m){
set.seed(graine+d)
Group[[d]] <- var_mat[sample.int(nrow(var_mat),m),]
}else{
Group[[d]] <- var_mat
}
var_mat <- Group[[d]]
crit = rep(NA,nrow(var_mat))
for(i in seq_along(crit)){
X_train = X[,var_mat[i,]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
index.na = !is.na(crit)
Criteria[[d]] <- crit[index.na]
Group[[d]] = var_mat[index.na,]
cv1 <- quantile(crit,probs=q0,na.rm=T)
selected_group[[d]] <- which(crit<=cv1)
}
library(plyr)
selected_ind <- list()
selected_ind[[1]] <- Group[[1]][selected_group[[1]]]
for(i in 2:dmax) {
if(length(selected_group[[i]]) != 1) {
selected_ind[[i]] <- Group[[i]][as.matrix(selected_group[[i]]), ]
} else {
selected_ind[[i]] <- t(as.matrix(Group[[i]][selected_group[[i]], ]))
}
}
models <- rbind.fill.matrix(selected_ind)
require(plotrix)
m_vector <- sapply(Criteria, function(x) summary(x)[4])
l_vector <- sapply(Criteria, function(x) summary(x)[1])
u_vector <- sapply(Criteria, function(x) summary(x)[6])
plotCI(1:length(Criteria), m_vector, ui = u_vector, li = l_vector, scol = "grey", col="red", pch = 16, main = "Ranges of criterion", ylab = "Range", xlab = "Model Size")
View(Criteria)
str(y)
is.factor(y)
y = as.factor(y)
str(X)
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
q0 = 0.2
dmax = 10
graine = 11
Criteria[[1]] <- crit
Group[[1]] <- seq_along(crit)
selected_group[[1]] <- which(crit <= quantile(crit,q0)) #models with smaller error
id_screening <- selected_group[[1]]
m = choose(length(id_screening),2)
for(d in 2:dmax){
# cv0 <- cv1
idRow <- selected_group[[d-1]]
if(d==2){
idVar <- Group[[d-1]][idRow]
nrv <- length(idVar)
}else{
if(length(idRow) == 1){
idVar <- Group[[d-1]][idRow]
nrv <- length(idVar)
}else{
idVar <- Group[[d-1]][idRow,]
nrv <- nrow(idVar)
}
}
# build all possible
A <- matrix(nr=nrv*length(id_screening),nc=d)
A[,1:(d-1)] <- kronecker(cbind(rep(1,length(id_screening))),idVar)
A[,d] <- rep(id_screening,each=nrv)
B <- unique(t(apply(A,1,sort)))
id_ndup <- which(apply(B,1,anyDuplicated) == 0)
var_mat <- B[id_ndup,]
rm(list=c("A","B"))
if(nrow(var_mat)>m){
set.seed(graine+d)
Group[[d]] <- var_mat[sample.int(nrow(var_mat),m),]
}else{
Group[[d]] <- var_mat
}
var_mat <- Group[[d]]
crit = rep(NA,nrow(var_mat))
for(i in seq_along(crit)){
X_train = X[,var_mat[i,]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
index.na = !is.na(crit)
Criteria[[d]] <- crit[index.na]
Group[[d]] = var_mat[index.na,]
cv1 <- quantile(crit,probs=q0,na.rm=T)
selected_group[[d]] <- which(crit<=cv1)
}
View(var_mat)
View(data_train)
i=21
X_train = X[,var_mat[i,]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
i=22
X_train = X[,var_mat[i,]]
var_mat[i,]
View(X)
s
s
s
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
crit
# data storage
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
crit
regressControl  <- trainControl(method="cv",number = 10)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
crit
table(y)
633/1089
data1 = read.csv("C:/Users/yagmu/Desktop/sub1.csv")
data1 = t(data1)
data1 = data1[-c(1:3),]
data1 = as.data.frame(data1)
X = data1[,-1]
y = as.factor(y)
X = as.numeric(X)
X$V65 = as.factor(X$V65)
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
library(caret)
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
y = data1$V1
X = data1[,-1]
y = as.factor(y)
X = as.numeric(X)
data1 = read.csv("C:/Users/yagmu/Desktop/sub1.csv")
data1 = t(data1)
data1 = data1[-c(1:3),]
data1 = as.data.frame(data1)
y = data1$V1
X = data1[,-1]
y = as.factor(y)
X = as.numeric(X)
X$V65 = as.factor(X$V65)
X[,1:64] = as.numeric(X)
data1 = read.csv("C:/Users/yagmu/Desktop/sub1.csv")
data1 = t(data1)
data1 = data1[-c(1:3),]
data1 = as.data.frame(data1)
y = data1$V1
X = data1[,-1]
View(X)
y = as.factor(y)
X[1:64] = lapply(X[1:64], as.numeric)
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
q0 = 0.2
dmax = 10
graine = 11
Criteria[[1]] <- crit
Group[[1]] <- seq_along(crit)
selected_group[[1]] <- which(crit <= quantile(crit,q0)) #models with smaller error
id_screening <- selected_group[[1]]
m = choose(length(id_screening),2)
for(d in 2:dmax){
# cv0 <- cv1
idRow <- selected_group[[d-1]]
if(d==2){
idVar <- Group[[d-1]][idRow]
nrv <- length(idVar)
}else{
if(length(idRow) == 1){
idVar <- Group[[d-1]][idRow]
nrv <- length(idVar)
}else{
idVar <- Group[[d-1]][idRow,]
nrv <- nrow(idVar)
}
}
# build all possible
A <- matrix(nr=nrv*length(id_screening),nc=d)
A[,1:(d-1)] <- kronecker(cbind(rep(1,length(id_screening))),idVar)
A[,d] <- rep(id_screening,each=nrv)
B <- unique(t(apply(A,1,sort)))
id_ndup <- which(apply(B,1,anyDuplicated) == 0)
var_mat <- B[id_ndup,]
rm(list=c("A","B"))
if(nrow(var_mat)>m){
set.seed(graine+d)
Group[[d]] <- var_mat[sample.int(nrow(var_mat),m),]
}else{
Group[[d]] <- var_mat
}
var_mat <- Group[[d]]
crit = rep(NA,nrow(var_mat))
for(i in seq_along(crit)){
X_train = X[,var_mat[i,]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
index.na = !is.na(crit)
Criteria[[d]] <- crit[index.na]
Group[[d]] = var_mat[index.na,]
cv1 <- quantile(crit,probs=q0,na.rm=T)
selected_group[[d]] <- which(crit<=cv1)
}
require(plotrix)
m_vector <- sapply(Criteria, function(x) summary(x)[4])
l_vector <- sapply(Criteria, function(x) summary(x)[1])
u_vector <- sapply(Criteria, function(x) summary(x)[6])
plotCI(1:length(Criteria), m_vector, ui = u_vector, li = l_vector, scol = "grey", col="red", pch = 16, main = "Ranges of criterion", ylab = "Range", xlab = "Model Size")
library(plyr)
selected_ind <- list()
selected_ind[[1]] <- Group[[1]][selected_group[[1]]]
for(i in 2:dmax) {
if(length(selected_group[[i]]) != 1) {
selected_ind[[i]] <- Group[[i]][as.matrix(selected_group[[i]]), ]
} else {
selected_ind[[i]] <- t(as.matrix(Group[[i]][selected_group[[i]], ]))
}
}
models <- rbind.fill.matrix(selected_ind)
data2 = read.csv("C:/Users/yagmu/Desktop/sub2.csv")
data2 = t(data2)
data2 = data2[-c(1:3),]
y = data2$V1
X = data2[,-1]
y = as.factor(y)
X[1:64] = lapply(X[1:64], as.numeric)
index_screen = seq(1,ncol(X))
ncol(X)
data2 = data.frame(data2)
data2 = read.csv("C:/Users/yagmu/Desktop/sub2.csv")
data2 = t(data2)
data2 = data2[-c(1:3),]
data2 = data.frame(data2)
y = data2$V1
X = data2[,-1]
y = as.factor(y)
X[1:64] = lapply(X[1:64], as.numeric)
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
index_screen
View(X)
str(X)
str(y)
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
i=1
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
index_screen[[i]]
data.frame(y, X_train)
nrow(X_train)
data2 = read.csv("C:/Users/yagmu/Desktop/sub2.csv")
data2 = t(data2)
data2 = data2[-c(1:3),]
data2 = as.data.frame(data2)
y = data2$V1
X = data2[,-1]
y = as.factor(y)
X[1:64] = lapply(X[1:64], as.numeric)
index_screen = seq(1,ncol(X))
crit = rep(NA, ncol(X))
# data storage
Criteria <- list()
Group <- list()
selected_group <- list()
regressControl  <- trainControl(method="cv",number = 5)
for(i in 1:length(index_screen)){
# index of group of variables
X_train =  X[,index_screen[[i]]]
data_train = data.frame(y, X_train)
fit_svml = train(y ~ ., data=data_train, method = "svmLinear", trControl = regressControl
)
crit[i] = fit_svml$results$Accuracy
}
q0 = 0.2
dmax = 10
graine = 11
Criteria[[1]] <- crit
Group[[1]] <- seq_along(crit)
selected_group[[1]] <- which(crit <= quantile(crit,q0)) #models with smaller error
id_screening2 <- selected_group[[1]]
intersect(id_screening,id_screening2)
setwd("C:/Users/yagmu/Desktop/Listening_time")
data = read.csv("train.csv")
View(data)
str(data)
table(data$Podcast_Name)
data$Podcast_Name = as.factor(data$Podcast_Name)
table(data$Episode_Title)
plot(data$Episode_Title)
plot(data$Episode_Title, data$Listening_Time_minutes)
data$Episode_Sentiment = as.factor(data$Episode_Sentiment)
data$Genre = as.factor(data$Genre)
data = data[,-1]
data$Publication_Day = as.factor(data$Publication_Day)
data$Publication_Time = as.factor(data$)
data$Episode_Sentiment = as.factor(data$Episode_Sentiment)
data$Publication_Time = as.factor(data$Publication_Time)
cor_matrix <- cor(data)
data_num = data[sapply(data, is.numeric)]
cor_matrix = cor(data_num)
heatmap(cor_matrix, main = "Correlation Matrix", col = colorRampPalette(c("blue", "white", "red"))(20))
source("C:/Users/yagmu/Desktop/Listening_time/listening_time.R", echo=TRUE)
heatmap(cor_matrix, main = "Correlation Matrix", col = colorRampPalette(c("blue", "white", "red"))(20))
View(cor_matrix)
install.packages("corrplot")
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45)
for(i in 1:ncol(data)){
print(sum(is.na(data[,i])))
}
87093/750000
hist(data$Guest_Popularity_percentage)
boxplot(data$Guest_Popularity_percentage)
hist(data$Episode_Length_minutes)
boxplot(data$Episode_Length_minutes)
hist(data$Episode_Length_minutes)
range(data$Episode_Length_minutes)
range(na.omit(data$Episode_Length_minutes))
table(data$Podcast_Name)
table(data$Episode_Title)
